generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-utils"
  relationModel = "default"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../kysely"
  fileName = "types.ts"
}

generator enums {
  provider = "ts-node --transpile-only ./enum-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Host {
  userId      Int
  eventTypeId Int
  isFixed     Boolean   @default(false)
  priority    Int?
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventTypeId])
  @@index([userId])
  @@index([eventTypeId])
}

model EventType {
  id                                   Int                       @id @default(autoincrement())
  /// @zod.min(1)
  title                                String
  /// @zod.custom(imports.eventTypeSlug)
  slug                                 String
  description                          String?
  /// @zod.custom(imports.eventTypeLocations)
  locations                            Json?
  /// @zod.min(1)
  length                               Int
  hidden                               Boolean                   @default(false)
  userId                               Int?
  eventName                            String?
  timeZone                             String?
  periodCountCalendarDays              Boolean?
  periodDays                           Int?
  /// @zod.custom(imports.coerceToDate)
  periodEndDate                        DateTime?
  /// @zod.custom(imports.coerceToDate)
  periodStartDate                      DateTime?
  requiresConfirmation                 Boolean                   @default(false)
  /// @zod.min(0)
  minimumBookingNotice                 Int                       @default(120)
  currency                             String                    @default("usd")
  price                                Int                       @default(0)
  schedulingType                       SchedulingType?
  teamId                               Int?
  disableGuests                        Boolean                   @default(false)
  position                             Int                       @default(0)
  periodType                           PeriodType                @default(UNLIMITED)
  slotInterval                         Int?
  /// @zod.custom(imports.EventTypeMetaDataSchema)
  metadata                             Json?
  afterEventBuffer                     Int                       @default(0)
  beforeEventBuffer                    Int                       @default(0)
  hideCalendarNotes                    Boolean                   @default(false)
  /// @zod.custom(imports.successRedirectUrl)
  successRedirectUrl                   String?
  seatsPerTimeSlot                     Int?
  /// @zod.custom(imports.recurringEventType)
  recurringEvent                       Json?
  scheduleId                           Int?
  /// @zod.custom(imports.intervalLimitsType)
  bookingLimits                        Json?
  seatsShowAttendees                   Boolean?                  @default(false)
  /// @zod.custom(imports.eventTypeBookingFields)
  bookingFields                        Json?
  /// @zod.custom(imports.intervalLimitsType)
  durationLimits                       Json?
  parentId                             Int?
  offsetStart                          Int                       @default(0)
  requiresBookerEmailVerification      Boolean                   @default(false)
  seatsShowAvailabilityCount           Boolean?                  @default(true)
  lockTimeZoneToggleOnBookingPage      Boolean                   @default(false)
  onlyShowFirstAvailableSlot           Boolean                   @default(false)
  isInstantEvent                       Boolean                   @default(false)
  assignAllTeamMembers                 Boolean                   @default(false)
  profileId                            Int?
  useEventTypeDestinationCalendarEmail Boolean                   @default(false)
  secondaryEmailId                     Int?
  forwardParamsSuccessRedirect         Boolean?                  @default(true)
  aiPhoneCallConfig                    AIPhoneCallConfiguration?
  availability                         Availability[]
  bookings                             Booking[]
  destinationCalendar                  DestinationCalendar?
  parent                               EventType?                @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)
  children                             EventType[]               @relation("managed_eventtype")
  profile                              Profile?                  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  schedule                             Schedule?                 @relation(fields: [scheduleId], references: [id])
  secondaryEmail                       SecondaryEmail?           @relation(fields: [secondaryEmailId], references: [id], onDelete: Cascade)
  team                                 Team?                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  owner                                User?                     @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  customInputs                         EventTypeCustomInput[]
  hashedLink                           HashedLink?
  hosts                                Host[]
  webhooks                             Webhook[]
  workflows                            WorkflowsOnEventTypes[]
  users                                User[]                    @relation("user_eventtype")

  @@unique([userId, slug])
  @@unique([teamId, slug])
  @@unique([userId, parentId])
  @@index([userId])
  @@index([teamId])
  @@index([scheduleId])
  @@index([secondaryEmailId])
}

model Credential {
  id                   Int                   @id @default(autoincrement())
  type                 String
  key                  Json
  userId               Int?
  appId                String?
  invalid              Boolean?              @default(false)
  teamId               Int?
  billingCycleStart    Int?
  paymentStatus        String?
  subscriptionId       String?
  CalendarCache        CalendarCache[]
  app                  App?                  @relation(fields: [appId], references: [slug], onDelete: Cascade)
  team                 Team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinationCalendars DestinationCalendar[]
  selectedCalendars    SelectedCalendar[]

  @@index([userId])
  @@index([appId])
  @@index([subscriptionId])
}

model DestinationCalendar {
  id           Int         @id @default(autoincrement())
  integration  String
  externalId   String
  userId       Int?        @unique
  eventTypeId  Int?        @unique
  credentialId Int?
  /// @zod.email()
  primaryEmail String?
  booking      Booking[]
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  eventType    EventType?  @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([credentialId])
}

model UserPassword {
  hash   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelSchedule {
  id           Int       @id @default(autoincrement())
  userId       Int
  timeZone     String
  startDate    DateTime
  endDate      DateTime?
  prevTimeZone String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([startDate])
  @@index([endDate])
}

model User {
  id                         Int                          @id @default(autoincrement())
  username                   String?
  name                       String?
  /// @zod.email()
  email                      String                       @unique
  bio                        String?
  timeZone                   String                       @default("Europe/London")
  weekStart                  String                       @default("Sunday")
  startTime                  Int                          @default(0)
  endTime                    Int                          @default(1440)
  createdDate                DateTime                     @default(now()) @map("created")
  bufferTime                 Int                          @default(0)
  emailVerified              DateTime?
  hideBranding               Boolean                      @default(false)
  theme                      String?
  completedOnboarding        Boolean                      @default(false)
  twoFactorEnabled           Boolean                      @default(false)
  twoFactorSecret            String?
  locale                     String?
  brandColor                 String?                      @default("#007ee5")
  identityProvider           IdentityProvider             @default(CAL)
  identityProviderId         String?
  invitedTo                  Int?
  /// @zod.custom(imports.userMetadata)
  metadata                   Json?
  verified                   Boolean?                     @default(false)
  timeFormat                 Int?                         @default(12)
  darkBrandColor             String?                      @default("#fafafa")
  trialEndsAt                DateTime?
  defaultScheduleId          Int?
  allowDynamicBooking        Boolean?                     @default(true)
  role                       UserPermissionRole           @default(USER)
  disableImpersonation       Boolean                      @default(false)
  organizationId             Int?
  allowSEOIndexing           Boolean?                     @default(true)
  backupCodes                String?
  receiveMonthlyDigestEmail  Boolean?                     @default(true)
  avatarUrl                  String?
  locked                     Boolean                      @default(false)
  appTheme                   String?
  movedToProfileId           Int?                         @unique
  accessCodes                AccessCode[]
  AccessToken                AccessToken[]
  accounts                   Account[]
  apiKeys                    ApiKey[]
  routingForms               App_RoutingForms_Form[]      @relation("routing-form")
  availability               Availability[]
  bookings                   Booking[]
  credentials                Credential[]
  destinationCalendar        DestinationCalendar?
  ownedEventTypes            EventType[]                  @relation("owner")
  Feedback                   Feedback[]
  hosts                      Host[]
  impersonatedBy             Impersonations[]             @relation("impersonated_by_user")
  impersonatedUsers          Impersonations[]             @relation("impersonated_user")
  integrationAccounts        IntegrationAccounts[]
  teams                      Membership[]
  bookingRedirectsTo         OutOfOfficeEntry[]           @relation("toUser")
  bookingRedirects           OutOfOfficeEntry[]
  OutOfOfficeReason          OutOfOfficeReason[]
  PlatformAuthorizationToken PlatformAuthorizationToken[]
  profiles                   Profile[]
  RefreshToken               RefreshToken[]
  schedules                  Schedule[]
  secondaryEmails            SecondaryEmail[]
  selectedCalendars          SelectedCalendar[]
  sessions                   Session[]
  travelSchedules            TravelSchedule[]
  password                   UserPassword?
  verifiedEmails             VerifiedEmail[]
  verifiedNumbers            VerifiedNumber[]
  webhooks                   Webhook[]
  workflows                  Workflow[]
  movedToProfile             Profile?                     @relation("moved_to_profile", fields: [movedToProfileId], references: [id])
  organization               Team?                        @relation("scope", fields: [organizationId], references: [id])
  platformOAuthClients       PlatformOAuthClient[]        @relation("PlatformOAuthClientToUser")
  eventTypes                 EventType[]                  @relation("user_eventtype")

  @@unique([email, username])
  @@unique([username, organizationId])
  @@index([username])
  @@index([emailVerified])
  @@index([identityProvider])
  @@index([identityProviderId])
  @@map("users")
}

model Profile {
  id             Int         @id @default(autoincrement())
  uid            String
  userId         Int
  organizationId Int
  username       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  eventTypes     EventType[]
  organization   Team        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  movedFromUser  User?       @relation("moved_to_profile")

  @@unique([userId, organizationId])
  @@index([uid])
  @@index([userId])
  @@index([organizationId])
}

model Team {
  id                    Int                     @id @default(autoincrement())
  /// @zod.min(1)
  name                  String
  /// @zod.min(1)
  slug                  String?
  bio                   String?
  hideBranding          Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  /// @zod.custom(imports.teamMetadataSchema)
  metadata              Json?
  hideBookATeamMember   Boolean                 @default(false)
  brandColor            String?
  darkBrandColor        String?
  theme                 String?
  appLogo               String?
  appIconLogo           String?
  parentId              Int?
  timeFormat            Int?
  timeZone              String                  @default("Europe/London")
  weekStart             String                  @default("Sunday")
  isPrivate             Boolean                 @default(false)
  logoUrl               String?
  calVideoLogo          String?
  pendingPayment        Boolean                 @default(false)
  isOrganization        Boolean                 @default(false)
  bannerUrl             String?
  isPlatform            Boolean                 @default(false)
  smsLockState          SMSLockState            @default(UNLOCKED)
  accessCodes           AccessCode[]
  apiKeys               ApiKey[]
  routingForms          App_RoutingForms_Form[]
  credentials           Credential[]
  dsyncTeamGroupMapping DSyncTeamGroupMapping[]
  eventTypes            EventType[]
  instantMeetingTokens  InstantMeetingToken[]
  members               Membership[]
  organizationSettings  OrganizationSettings?
  platformBilling       PlatformBilling?
  platformOAuthClient   PlatformOAuthClient[]
  orgProfiles           Profile[]
  parent                Team?                   @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)
  children              Team[]                  @relation("organization")
  inviteTokens          VerificationToken[]
  verifiedEmails        VerifiedEmail[]
  verifiedNumbers       VerifiedNumber[]
  webhooks              Webhook[]
  workflows             Workflow[]
  orgUsers              User[]                  @relation("scope")

  @@unique([slug, parentId])
  @@index([parentId])
}

model OrganizationSettings {
  id                            Int        @id @default(autoincrement())
  organizationId                Int        @unique
  isOrganizationConfigured      Boolean    @default(false)
  isOrganizationVerified        Boolean    @default(false)
  orgAutoAcceptEmail            String
  lockEventTypeCreationForUsers Boolean    @default(false)
  isAdminReviewed               Boolean    @default(false)
  adminGetsNoSlotsNotification  Boolean    @default(false)
  dSyncData                     DSyncData?
  organization                  Team       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Membership {
  teamId               Int
  userId               Int
  accepted             Boolean        @default(false)
  role                 MembershipRole
  disableImpersonation Boolean        @default(false)
  id                   Int            @id @default(autoincrement())
  team                 Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model VerificationToken {
  id               Int             @id @default(autoincrement())
  identifier       String
  token            String          @unique
  expires          DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  expiresInDays    Int?
  teamId           Int?
  secondaryEmailId Int?
  secondaryEmail   SecondaryEmail? @relation(fields: [secondaryEmailId], references: [id])
  team             Team?           @relation(fields: [teamId], references: [id])

  @@unique([identifier, token])
  @@index([token])
  @@index([teamId])
  @@index([secondaryEmailId])
}

model InstantMeetingToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  teamId    Int
  bookingId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id])

  @@index([token])
}

model BookingReference {
  id                         Int      @id @default(autoincrement())
  /// @zod.min(1)
  type                       String
  /// @zod.min(1)
  uid                        String
  bookingId                  Int?
  meetingId                  String?
  meetingPassword            String?
  meetingUrl                 String?
  deleted                    Boolean?
  externalCalendarId         String?
  credentialId               Int?
  thirdPartyRecurringEventId String?
  booking                    Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([credentialId])
  @@index([type])
  @@index([uid])
}

model Attendee {
  id          Int          @id @default(autoincrement())
  email       String
  name        String
  timeZone    String
  bookingId   Int?
  locale      String?      @default("en")
  noShow      Boolean?     @default(false)
  booking     Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingSeat BookingSeat?

  @@index([email])
  @@index([bookingId])
}

model Booking {
  id                    Int                        @id @default(autoincrement())
  uid                   String                     @unique
  userId                Int?
  eventTypeId           Int?
  title                 String
  description           String?
  startTime             DateTime
  endTime               DateTime
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime?
  location              String?
  paid                  Boolean                    @default(false)
  status                BookingStatus              @default(ACCEPTED)
  cancellationReason    String?
  rejectionReason       String?
  fromReschedule        String?
  rescheduled           Boolean?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  recurringEventId      String?
  customInputs          Json?
  smsReminderNumber     String?
  destinationCalendarId Int?
  scheduledJobs         String[]
  /// @zod.custom(imports.bookingMetadataSchema)
  metadata              Json?
  /// @zod.custom(imports.bookingResponses)
  responses             Json?
  isRecorded            Boolean                    @default(false)
  iCalSequence          Int                        @default(0)
  iCalUID               String?                    @default("")
  /// @zod.email()
  userPrimaryEmail      String?
  idempotencyKey        String?                    @unique
  noShowHost            Boolean?
  rating                Int?
  ratingFeedback        String?
  attendees             Attendee[]
  destinationCalendar   DestinationCalendar?       @relation(fields: [destinationCalendarId], references: [id])
  eventType             EventType?                 @relation(fields: [eventTypeId], references: [id])
  user                  User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  references            BookingReference[]
  seatsReferences       BookingSeat[]
  instantMeetingToken   InstantMeetingToken?
  payment               Payment[]
  scheduledTriggers     WebhookScheduledTriggers[]
  workflowReminders     WorkflowReminder[]

  @@index([eventTypeId])
  @@index([userId])
  @@index([destinationCalendarId])
  @@index([recurringEventId])
  @@index([uid])
  @@index([status])
  @@index([startTime, endTime, status])
}

model Schedule {
  id           Int            @id @default(autoincrement())
  userId       Int
  name         String
  timeZone     String?
  availability Availability[]
  eventType    EventType[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Availability {
  id          Int        @id @default(autoincrement())
  userId      Int?
  eventTypeId Int?
  days        Int[]
  date        DateTime?  @db.Date
  startTime   DateTime   @db.Time(6)
  endTime     DateTime   @db.Time(6)
  scheduleId  Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([scheduleId])
}

model SelectedCalendar {
  userId       Int
  integration  String
  externalId   String
  credentialId Int?
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, integration, externalId])
  @@index([userId])
  @@index([integration])
  @@index([externalId])
}

model EventTypeCustomInput {
  id          Int                      @id @default(autoincrement())
  eventTypeId Int
  label       String
  required    Boolean
  type        EventTypeCustomInputType
  placeholder String                   @default("")
  /// @zod.custom(imports.customInputOptionSchema)
  options     Json?
  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@index([eventTypeId])
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime
}

model ReminderMail {
  id             Int          @id @default(autoincrement())
  referenceId    Int
  reminderType   ReminderType
  elapsedMinutes Int
  createdAt      DateTime     @default(now())

  @@index([referenceId])
  @@index([reminderType])
}

model Payment {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  bookingId     Int
  amount        Int
  fee           Int
  currency      String
  success       Boolean
  refunded      Boolean
  data          Json
  externalId    String         @unique
  appId         String?
  paymentOption PaymentOption? @default(ON_BOOKING)
  app           App?           @relation(fields: [appId], references: [slug], onDelete: Cascade)
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([externalId])
}

model Webhook {
  id                String                     @id @unique
  userId            Int?
  /// @zod.url()
  subscriberUrl     String
  createdAt         DateTime                   @default(now())
  active            Boolean                    @default(true)
  eventTriggers     WebhookTriggerEvents[]
  payloadTemplate   String?
  eventTypeId       Int?
  appId             String?
  secret            String?
  teamId            Int?
  platform          Boolean                    @default(false)
  app               App?                       @relation(fields: [appId], references: [slug], onDelete: Cascade)
  eventType         EventType?                 @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  team              Team?                      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user              User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduledTriggers WebhookScheduledTriggers[]

  @@unique([userId, subscriberUrl], name: "courseIdentifier")
}

model Impersonations {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  impersonatedUserId Int
  impersonatedById   Int
  impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)
  impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id         String    @id @unique @default(cuid())
  userId     Int
  note       String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String    @unique
  appId      String?
  teamId     Int?
  app        App?      @relation(fields: [appId], references: [slug], onDelete: Cascade)
  team       Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique
  eventTypeId Int       @unique
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
}

model IntegrationAccounts {
  tokenType              String?
  expiresIn              Int?
  createdAt              Int?
  refreshToken           String
  accessToken            String
  scope                  String?
  ownerUniqIdentifier    String?
  provider               IntegrationProvider
  userId                 Int
  user                   User                    @relation(fields: [userId], references: [id])
  integrationUserProfile IntegrationUserProfile?

  @@id([userId, provider])
  @@unique([userId, provider])
}

model IntegrationUserProfile {
  scheduling_url              String?
  avatar_url                  String?
  created_at                  DateTime?
  updated_at                  DateTime?
  current_organization        String?
  integrationAccountsUserId   Int
  integrationAccountsProvider IntegrationProvider
  integrationAccount          IntegrationAccounts @relation(fields: [integrationAccountsUserId, integrationAccountsProvider], references: [userId, provider])

  @@id([integrationAccountsUserId, integrationAccountsProvider])
  @@unique([integrationAccountsUserId, integrationAccountsProvider])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerEmail     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model App {
  slug        String          @id @unique
  dirName     String          @unique
  keys        Json?
  categories  AppCategories[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  enabled     Boolean         @default(false)
  ApiKey      ApiKey[]
  credentials Credential[]
  payments    Payment[]
  Webhook     Webhook[]

  @@index([enabled])
}

model App_RoutingForms_Form {
  id          String                          @id @default(cuid())
  description String?
  routes      Json?
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt
  name        String
  fields      Json?
  userId      Int
  disabled    Boolean                         @default(false)
  /// @zod.custom(imports.RoutingFormSettings)
  settings    Json?
  teamId      Int?
  position    Int                             @default(0)
  team        Team?                           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User                            @relation("routing-form", fields: [userId], references: [id], onDelete: Cascade)
  responses   App_RoutingForms_FormResponse[]

  @@index([userId])
  @@index([disabled])
}

model App_RoutingForms_FormResponse {
  id           Int                   @id @default(autoincrement())
  formFillerId String                @default(cuid())
  formId       String
  response     Json
  createdAt    DateTime              @default(now())
  form         App_RoutingForms_Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formFillerId, formId])
  @@index([formFillerId])
  @@index([formId])
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  userId  Int
  rating  String
  comment String?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rating])
}

model WorkflowStep {
  id                        Int                @id @default(autoincrement())
  stepNumber                Int
  action                    WorkflowActions
  workflowId                Int
  sendTo                    String?
  reminderBody              String?
  emailSubject              String?
  template                  WorkflowTemplates  @default(REMINDER)
  numberRequired            Boolean?
  sender                    String?
  numberVerificationPending Boolean            @default(true)
  includeCalendarEvent      Boolean            @default(false)
  workflowReminders         WorkflowReminder[]
  workflow                  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
}

model Workflow {
  id       Int                     @id @default(autoincrement())
  name     String
  userId   Int?
  trigger  WorkflowTriggerEvents
  time     Int?
  timeUnit TimeUnit?
  teamId   Int?
  position Int                     @default(0)
  team     Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps    WorkflowStep[]
  activeOn WorkflowsOnEventTypes[]

  @@index([userId])
  @@index([teamId])
}

model AIPhoneCallConfiguration {
  id              Int       @id @default(autoincrement())
  eventTypeId     Int       @unique
  generalPrompt   String
  yourPhoneNumber String
  numberToCall    String
  guestName       String
  enabled         Boolean   @default(false)
  beginMessage    String?
  llmId           String?
  guestCompany    String?
  guestEmail      String?
  eventType       EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@index([eventTypeId])
}

model WorkflowsOnEventTypes {
  id          Int       @id @default(autoincrement())
  workflowId  Int
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, eventTypeId])
  @@index([workflowId])
  @@index([eventTypeId])
}

model Deployment {
  /// This is a single row table, so we use a fixed id
  id              Int       @id @default(1)
  logo            String?
  /// @zod.custom(imports.DeploymentTheme)
  theme           Json?
  licenseKey      String?
  agreedLicenseAt DateTime?
}

model WorkflowReminder {
  id                  Int             @id @default(autoincrement())
  bookingUid          String?
  method              WorkflowMethods
  scheduledDate       DateTime
  referenceId         String?         @unique
  scheduled           Boolean
  workflowStepId      Int?
  cancelled           Boolean?
  seatReferenceId     String?
  isMandatoryReminder Boolean?        @default(false)
  retryCount          Int             @default(0)
  booking             Booking?        @relation(fields: [bookingUid], references: [uid])
  workflowStep        WorkflowStep?   @relation(fields: [workflowStepId], references: [id])

  @@index([bookingUid])
  @@index([workflowStepId])
  @@index([seatReferenceId])
  @@index([method, scheduled, scheduledDate])
  @@index([cancelled, scheduledDate])
}

model WebhookScheduledTriggers {
  id            Int       @id @default(autoincrement())
  jobName       String?
  subscriberUrl String
  payload       String
  startAfter    DateTime
  retryCount    Int       @default(0)
  createdAt     DateTime? @default(now())
  webhookId     String?
  appId         String?
  bookingId     Int?
  booking       Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  webhook       Webhook?  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model BookingSeat {
  id           Int      @id @default(autoincrement())
  referenceUid String   @unique
  bookingId    Int
  attendeeId   Int      @unique
  /// @zod.custom(imports.bookingSeatDataSchema)
  data         Json?
  attendee     Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([attendeeId])
}

model VerifiedNumber {
  id          Int    @id @default(autoincrement())
  userId      Int?
  phoneNumber String
  teamId      Int?
  team        Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model VerifiedEmail {
  id     Int    @id @default(autoincrement())
  userId Int?
  teamId Int?
  email  String
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model Feature {
  slug        String       @id @unique
  enabled     Boolean      @default(false)
  description String?
  type        FeatureType? @default(RELEASE)
  stale       Boolean?     @default(false)
  lastUsedAt  DateTime?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @default(now()) @updatedAt
  updatedBy   Int?

  @@index([enabled])
  @@index([stale])
}

model SelectedSlots {
  id               Int      @id @default(autoincrement())
  eventTypeId      Int
  userId           Int
  slotUtcStartDate DateTime
  slotUtcEndDate   DateTime
  uid              String
  releaseAt        DateTime
  isSeat           Boolean  @default(false)

  @@unique([userId, slotUtcStartDate, slotUtcEndDate, uid], name: "selectedSlotUnique")
}

model OAuthClient {
  clientId     String       @id @unique
  redirectUri  String
  clientSecret String
  name         String
  logo         String?
  accessCodes  AccessCode[]
}

model AccessCode {
  id        Int           @id @default(autoincrement())
  code      String
  clientId  String?
  expiresAt DateTime
  scopes    AccessScope[]
  userId    Int?
  teamId    Int?
  client    OAuthClient?  @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  team      Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarCache {
  key          String
  value        Json
  expiresAt    DateTime
  credentialId Int
  credential   Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@id([credentialId, key])
  @@unique([credentialId, key])
}

model TempOrgRedirect {
  id        Int          @id @default(autoincrement())
  from      String
  fromOrgId Int
  type      RedirectType
  toUrl     String
  enabled   Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([from, type, fromOrgId])
}

model Avatar {
  teamId    Int     @default(0)
  userId    Int     @default(0)
  data      String
  objectKey String  @unique
  isBanner  Boolean @default(false)

  @@unique([teamId, userId, isBanner])
  @@map("avatars")
}

model OutOfOfficeEntry {
  id        Int                @id @default(autoincrement())
  uuid      String             @unique
  start     DateTime
  end       DateTime
  userId    Int
  toUserId  Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  reasonId  Int?
  notes     String?
  reason    OutOfOfficeReason? @relation(fields: [reasonId], references: [id])
  toUser    User?              @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([uuid])
  @@index([userId])
  @@index([toUserId])
  @@index([start, end])
}

model OutOfOfficeReason {
  id      Int                @id @default(autoincrement())
  emoji   String
  reason  String             @unique
  enabled Boolean            @default(true)
  userId  Int?
  entries OutOfOfficeEntry[]
  user    User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformOAuthClient {
  id                           String                       @id @default(cuid())
  name                         String
  secret                       String
  permissions                  Int
  logo                         String?
  redirectUris                 String[]
  organizationId               Int
  createdAt                    DateTime                     @default(now())
  areEmailsEnabled             Boolean                      @default(false)
  bookingCancelRedirectUri     String?
  bookingRedirectUri           String?
  bookingRescheduleRedirectUri String?
  accessTokens                 AccessToken[]
  authorizationTokens          PlatformAuthorizationToken[]
  organization                 Team                         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  refreshToken                 RefreshToken[]
  users                        User[]                       @relation("PlatformOAuthClientToUser")
}

model PlatformAuthorizationToken {
  id                    String              @id @default(cuid())
  platformOAuthClientId String
  userId                Int
  createdAt             DateTime            @default(now())
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platformOAuthClientId])
}

model AccessToken {
  id                    Int                 @id @default(autoincrement())
  secret                String              @unique
  createdAt             DateTime            @default(now())
  expiresAt             DateTime
  platformOAuthClientId String
  userId                Int
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id                    Int                 @id @default(autoincrement())
  secret                String              @unique
  createdAt             DateTime            @default(now())
  expiresAt             DateTime
  platformOAuthClientId String
  userId                Int
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DSyncData {
  id               Int                     @id @default(autoincrement())
  directoryId      String                  @unique
  tenant           String
  organizationId   Int?                    @unique
  org              OrganizationSettings?   @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  teamGroupMapping DSyncTeamGroupMapping[]
}

model DSyncTeamGroupMapping {
  id             Int       @id @default(autoincrement())
  teamId         Int
  directoryId    String
  groupName      String
  organizationId Int
  directory      DSyncData @relation(fields: [directoryId], references: [directoryId], onDelete: Cascade)
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, groupName])
}

model SecondaryEmail {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  email              String              @unique
  emailVerified      DateTime?
  eventTypes         EventType[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationTokens VerificationToken[]

  @@unique([userId, email])
  @@index([userId])
}

model Task {
  id          String    @id @unique @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scheduledAt DateTime  @default(now())
  succeededAt DateTime?
  type        String
  payload     String
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  lastError   String?
}

model KeycloakSessionInfo {
  id           Int    @id @default(autoincrement())
  browserToken String @unique
  metadata     Json?
}

model PlatformBilling {
  id                Int      @id @unique
  customerId        String   @unique
  plan              String   @default("none")
  subscriptionId    String?
  billingCycleStart Int?
  billingCycleEnd   Int?
  overdue           Boolean? @default(false)
  team              Team     @relation(fields: [id], references: [id], onDelete: Cascade)
}

view BookingTimeStatus {
  id             Int            @unique
  uid            String?
  eventTypeId    Int?
  title          String?
  description    String?
  startTime      DateTime?
  endTime        DateTime?
  createdAt      DateTime?
  location       String?
  paid           Boolean?
  status         BookingStatus?
  rescheduled    Boolean?
  userId         Int?
  teamId         Int?
  eventLength    Int?
  timeStatus     String?
  eventParentId  Int?
  userEmail      String?
  username       String?
  ratingFeedback String?
  rating         Int?
  noShowHost     Boolean?
}

enum SchedulingType {
  ROUND_ROBIN @map("roundRobin")
  COLLECTIVE  @map("collective")
  MANAGED     @map("managed")
}

enum PeriodType {
  UNLIMITED      @map("unlimited")
  ROLLING        @map("rolling")
  RANGE          @map("range")
  ROLLING_WINDOW @map("rolling_window")
}

enum IdentityProvider {
  CAL
  GOOGLE
  SAML
  KEYCLOAK
}

enum UserPermissionRole {
  USER
  ADMIN
}

enum MembershipRole {
  MEMBER
  OWNER
  ADMIN
}

enum BookingStatus {
  CANCELLED     @map("cancelled")
  ACCEPTED      @map("accepted")
  REJECTED      @map("rejected")
  PENDING       @map("pending")
  AWAITING_HOST @map("awaiting_host")
}

enum EventTypeCustomInputType {
  TEXT     @map("text")
  TEXTLONG @map("textLong")
  NUMBER   @map("number")
  BOOL     @map("bool")
  PHONE    @map("phone")
  RADIO    @map("radio")
}

enum ReminderType {
  PENDING_BOOKING_CONFIRMATION
}

enum PaymentOption {
  ON_BOOKING
  HOLD
}

enum WebhookTriggerEvents {
  BOOKING_CREATED
  BOOKING_RESCHEDULED
  BOOKING_CANCELLED
  FORM_SUBMITTED
  MEETING_ENDED
  RECORDING_READY
  BOOKING_PAID
  BOOKING_REQUESTED
  BOOKING_REJECTED
  BOOKING_PAYMENT_INITIATED
  MEETING_STARTED
  INSTANT_MEETING
}

enum IntegrationProvider {
  CALENDLY
}

enum AppCategories {
  calendar
  messaging
  other
  payment
  video
  web3
  automation
  analytics
  conferencing
  crm
}

enum WorkflowTriggerEvents {
  BEFORE_EVENT
  EVENT_CANCELLED
  NEW_EVENT
  RESCHEDULE_EVENT
  AFTER_EVENT
}

enum WorkflowActions {
  EMAIL_HOST
  EMAIL_ATTENDEE
  SMS_ATTENDEE
  SMS_NUMBER
  EMAIL_ADDRESS
  WHATSAPP_ATTENDEE
  WHATSAPP_NUMBER
}

enum TimeUnit {
  DAY    @map("day")
  HOUR   @map("hour")
  MINUTE @map("minute")
}

enum WorkflowTemplates {
  REMINDER
  CUSTOM
  CANCELLED
  RESCHEDULED
  COMPLETED
  RATING
}

enum WorkflowMethods {
  EMAIL
  SMS
  WHATSAPP
}

enum FeatureType {
  RELEASE
  EXPERIMENT
  OPERATIONAL
  KILL_SWITCH
  PERMISSION
}

enum AccessScope {
  READ_BOOKING
  READ_PROFILE
}

enum RedirectType {
  UserEventType @map("user-event-type")
  TeamEventType @map("team-event-type")
  User          @map("user")
  Team          @map("team")
}

enum SMSLockState {
  LOCKED
  UNLOCKED
  REVIEW_NEEDED
}
